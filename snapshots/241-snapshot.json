{
  "data": {
    "startData": {},
    "resultData": {
      "runData": {
        "When clicking \"Test workflow\"": [
          {
            "hints": [],
            "startTime": 1733911689987,
            "executionTime": 0,
            "source": [],
            "executionStatus": "success",
            "data": {
              "main": [
                [
                  {
                    "json": {},
                    "pairedItem": {
                      "item": 0
                    }
                  }
                ]
              ]
            }
          }
        ],
        "OpenAI Chat Model": [
          {
            "startTime": 1733911689991,
            "executionTime": 1534,
            "executionStatus": "success",
            "source": [
              null
            ],
            "data": {
              "ai_languageModel": [
                [
                  {
                    "json": {
                      "response": {
                        "object": true
                      },
                      "tokenUsage": {
                        "object": true
                      }
                    }
                  }
                ]
              ]
            },
            "inputOverride": {
              "ai_languageModel": [
                [
                  {
                    "json": {
                      "messages": [
                        "System: You are a helpful AI assistant.\nHuman: What is the result of 30 + (10002200 / 100)? Only respond with a number."
                      ],
                      "estimatedTokens": 33,
                      "options": {
                        "openai_api_key": {
                          "lc": 1,
                          "type": "secret",
                          "id": [
                            "OPENAI_API_KEY"
                          ]
                        },
                        "model": "gpt-4o-mini",
                        "temperature": 0,
                        "timeout": 60000,
                        "max_retries": 2,
                        "configuration": {},
                        "model_kwargs": {}
                      }
                    }
                  }
                ]
              ]
            },
            "metadata": {
              "subRun": [
                {
                  "node": "OpenAI Chat Model",
                  "runIndex": 0
                },
                {
                  "node": "OpenAI Chat Model",
                  "runIndex": 1
                }
              ]
            }
          },
          {
            "startTime": 1733911691525,
            "executionTime": 394,
            "executionStatus": "success",
            "source": [
              null
            ],
            "data": {
              "ai_languageModel": [
                [
                  {
                    "json": {
                      "response": {
                        "object": true
                      },
                      "tokenUsage": {
                        "object": true
                      }
                    }
                  }
                ]
              ]
            },
            "inputOverride": {
              "ai_languageModel": [
                [
                  {
                    "json": {
                      "messages": [
                        "System: You are a helpful AI assistant.\nHuman: What is the result of 30 + (10002200 / 100)? Only respond with a number.\nAI: \nFunction: calculator, 100052"
                      ],
                      "estimatedTokens": 43,
                      "options": {
                        "openai_api_key": {
                          "lc": 1,
                          "type": "secret",
                          "id": [
                            "OPENAI_API_KEY"
                          ]
                        },
                        "model": "gpt-4o-mini",
                        "temperature": 0,
                        "timeout": 60000,
                        "max_retries": 2,
                        "configuration": {},
                        "model_kwargs": {}
                      }
                    }
                  }
                ]
              ]
            }
          }
        ],
        "Calculator": [
          {
            "startTime": 1733911691525,
            "executionTime": 0,
            "executionStatus": "success",
            "source": [
              null
            ],
            "data": {
              "ai_tool": [
                [
                  {
                    "json": {
                      "response": "100052"
                    }
                  }
                ]
              ]
            },
            "inputOverride": {
              "ai_tool": [
                [
                  {
                    "json": {
                      "query": "30 + (10002200 / 100)"
                    }
                  }
                ]
              ]
            },
            "metadata": {
              "subRun": [
                {
                  "node": "Calculator",
                  "runIndex": 0
                }
              ]
            }
          }
        ],
        "AI Agent": [
          {
            "hints": [],
            "startTime": 1733911689987,
            "executionTime": 1932,
            "source": [
              {
                "previousNode": "When clicking \"Test workflow\""
              }
            ],
            "executionStatus": "success",
            "data": {
              "main": [
                [
                  {
                    "json": {
                      "output": "100052",
                      "intermediateSteps": [
                        "json array"
                      ]
                    },
                    "pairedItem": {
                      "item": 0
                    }
                  }
                ]
              ]
            }
          }
        ],
        "Edit Fields": [
          {
            "hints": [],
            "startTime": 1733911691919,
            "executionTime": 4,
            "source": [
              {
                "previousNode": "AI Agent"
              }
            ],
            "executionStatus": "success",
            "data": {
              "main": [
                [
                  {
                    "json": {
                      "calculator_called": true,
                      "has_correct_output": "true"
                    },
                    "pairedItem": {
                      "item": 0
                    }
                  }
                ]
              ]
            }
          }
        ],
        "Azure OpenAI Chat Model": [
          {
            "startTime": 1733911691928,
            "executionTime": 1711,
            "executionStatus": "success",
            "source": [
              null
            ],
            "data": {
              "ai_languageModel": [
                [
                  {
                    "json": {
                      "response": {
                        "object": true
                      },
                      "tokenUsage": {
                        "object": true
                      }
                    }
                  }
                ]
              ]
            },
            "inputOverride": {
              "ai_languageModel": [
                [
                  {
                    "json": {
                      "messages": [
                        "System: You are a helpful AI assistant.\nHuman: How much is 23200 / 232? Only respond with a number\nYou must format your output as a JSON value that adheres to a given \"JSON Schema\" instance.\n\n\"JSON Schema\" is a declarative language that allows you to annotate and validate JSON documents.\n\nFor example, the example \"JSON Schema\" instance {{\"properties\": {{\"foo\": {{\"description\": \"a list of test words\", \"type\": \"array\", \"items\": {{\"type\": \"string\"}}}}}}, \"required\": [\"foo\"]}}}}\nwould match an object with one required property, \"foo\". The \"type\" property specifies \"foo\" must be an \"array\", and the \"description\" property semantically describes it as \"a list of test words\". The items within \"foo\" must be strings.\nThus, the object {{\"foo\": [\"bar\", \"baz\"]}} is a well-formatted instance of this example \"JSON Schema\". The object {{\"properties\": {{\"foo\": [\"bar\", \"baz\"]}}}} is not well-formatted.\n\nYour output will be parsed and type-checked according to the provided schema instance, so make sure all fields in your output match the schema exactly and there are no trailing commas!\n\nHere is the JSON Schema instance your output must adhere to. Include the enclosing markdown codeblock:\n```json\n{\"type\":\"object\",\"properties\":{\"output\":{\"type\":\"object\",\"properties\":{\"result\":{}},\"additionalProperties\":false}},\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}\n```\n"
                      ],
                      "estimatedTokens": 334,
                      "options": {
                        "azure_openai_api_deployment_name": "gpt4",
                        "azure_openai_api_instance_name": "n8n-ai-us",
                        "azure_openai_api_key": {
                          "lc": 1,
                          "type": "secret",
                          "id": [
                            "AZURE_OPENAI_API_KEY"
                          ]
                        },
                        "azure_openai_api_version": "2023-07-01-preview",
                        "temperature": 0,
                        "timeout": 60000,
                        "max_retries": 2,
                        "model_kwargs": {},
                        "openai_api_key": {
                          "lc": 1,
                          "type": "secret",
                          "id": [
                            "OPENAI_API_KEY"
                          ]
                        }
                      }
                    }
                  }
                ]
              ]
            },
            "metadata": {
              "subRun": [
                {
                  "node": "Azure OpenAI Chat Model",
                  "runIndex": 0
                },
                {
                  "node": "Azure OpenAI Chat Model",
                  "runIndex": 1
                }
              ]
            }
          },
          {
            "startTime": 1733911693640,
            "executionTime": 729,
            "executionStatus": "success",
            "source": [
              null
            ],
            "data": {
              "ai_languageModel": [
                [
                  {
                    "json": {
                      "response": {
                        "object": true
                      },
                      "tokenUsage": {
                        "object": true
                      }
                    }
                  }
                ]
              ]
            },
            "inputOverride": {
              "ai_languageModel": [
                [
                  {
                    "json": {
                      "messages": [
                        "System: You are a helpful AI assistant.\nHuman: How much is 23200 / 232? Only respond with a number\nYou must format your output as a JSON value that adheres to a given \"JSON Schema\" instance.\n\n\"JSON Schema\" is a declarative language that allows you to annotate and validate JSON documents.\n\nFor example, the example \"JSON Schema\" instance {{\"properties\": {{\"foo\": {{\"description\": \"a list of test words\", \"type\": \"array\", \"items\": {{\"type\": \"string\"}}}}}}, \"required\": [\"foo\"]}}}}\nwould match an object with one required property, \"foo\". The \"type\" property specifies \"foo\" must be an \"array\", and the \"description\" property semantically describes it as \"a list of test words\". The items within \"foo\" must be strings.\nThus, the object {{\"foo\": [\"bar\", \"baz\"]}} is a well-formatted instance of this example \"JSON Schema\". The object {{\"properties\": {{\"foo\": [\"bar\", \"baz\"]}}}} is not well-formatted.\n\nYour output will be parsed and type-checked according to the provided schema instance, so make sure all fields in your output match the schema exactly and there are no trailing commas!\n\nHere is the JSON Schema instance your output must adhere to. Include the enclosing markdown codeblock:\n```json\n{\"type\":\"object\",\"properties\":{\"output\":{\"type\":\"object\",\"properties\":{\"result\":{}},\"additionalProperties\":false}},\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}\n```\n\nAI: \nFunction: calculator, 100"
                      ],
                      "estimatedTokens": 343,
                      "options": {
                        "azure_openai_api_deployment_name": "gpt4",
                        "azure_openai_api_instance_name": "n8n-ai-us",
                        "azure_openai_api_key": {
                          "lc": 1,
                          "type": "secret",
                          "id": [
                            "AZURE_OPENAI_API_KEY"
                          ]
                        },
                        "azure_openai_api_version": "2023-07-01-preview",
                        "temperature": 0,
                        "timeout": 60000,
                        "max_retries": 2,
                        "model_kwargs": {},
                        "openai_api_key": {
                          "lc": 1,
                          "type": "secret",
                          "id": [
                            "OPENAI_API_KEY"
                          ]
                        }
                      }
                    }
                  }
                ]
              ]
            }
          }
        ],
        "Calculator1": [
          {
            "startTime": 1733911693639,
            "executionTime": 0,
            "executionStatus": "success",
            "source": [
              null
            ],
            "data": {
              "ai_tool": [
                [
                  {
                    "json": {
                      "response": "100"
                    }
                  }
                ]
              ]
            },
            "inputOverride": {
              "ai_tool": [
                [
                  {
                    "json": {
                      "query": "23200 / 232"
                    }
                  }
                ]
              ]
            },
            "metadata": {
              "subRun": [
                {
                  "node": "Calculator1",
                  "runIndex": 0
                }
              ]
            }
          }
        ],
        "Structured Output Parser": [
          {
            "startTime": 1733911694369,
            "executionTime": 0,
            "executionStatus": "success",
            "source": [
              null
            ],
            "data": {
              "ai_outputParser": [
                [
                  {
                    "json": {
                      "action": "parse",
                      "response": {
                        "object": true
                      }
                    }
                  }
                ]
              ]
            },
            "inputOverride": {
              "ai_outputParser": [
                [
                  {
                    "json": {
                      "action": "parse",
                      "text": "```json\n{\"output\":{\"result\":100}}\n```"
                    }
                  }
                ]
              ]
            },
            "metadata": {
              "subRun": [
                {
                  "node": "Structured Output Parser",
                  "runIndex": 0
                }
              ]
            }
          }
        ],
        "AI Agent1": [
          {
            "hints": [],
            "startTime": 1733911691923,
            "executionTime": 2446,
            "source": [
              {
                "previousNode": "When clicking \"Test workflow\""
              }
            ],
            "executionStatus": "success",
            "data": {
              "main": [
                [
                  {
                    "json": {
                      "output": {
                        "object": true
                      }
                    },
                    "pairedItem": {
                      "item": 0
                    }
                  }
                ]
              ]
            }
          }
        ],
        "Edit Fields1": [
          {
            "hints": [],
            "startTime": 1733911694369,
            "executionTime": 2,
            "source": [
              {
                "previousNode": "AI Agent1"
              }
            ],
            "executionStatus": "success",
            "data": {
              "main": [
                [
                  {
                    "json": {
                      "has_correct_output": "true"
                    },
                    "pairedItem": {
                      "item": 0
                    }
                  }
                ]
              ]
            }
          }
        ]
      },
      "lastNodeExecuted": "Edit Fields1"
    },
    "executionData": {
      "contextData": {},
      "nodeExecutionStack": [],
      "metadata": {
        "OpenAI Chat Model": [
          {
            "subRun": [
              {
                "node": "OpenAI Chat Model",
                "runIndex": 0
              },
              {
                "node": "OpenAI Chat Model",
                "runIndex": 1
              }
            ]
          }
        ],
        "Calculator": [
          {
            "subRun": [
              {
                "node": "Calculator",
                "runIndex": 0
              }
            ]
          }
        ],
        "Azure OpenAI Chat Model": [
          {
            "subRun": [
              {
                "node": "Azure OpenAI Chat Model",
                "runIndex": 0
              },
              {
                "node": "Azure OpenAI Chat Model",
                "runIndex": 1
              }
            ]
          }
        ],
        "Calculator1": [
          {
            "subRun": [
              {
                "node": "Calculator1",
                "runIndex": 0
              }
            ]
          }
        ],
        "Structured Output Parser": [
          {
            "subRun": [
              {
                "node": "Structured Output Parser",
                "runIndex": 0
              }
            ]
          }
        ]
      },
      "waitingExecution": {},
      "waitingExecutionSource": {}
    }
  },
  "mode": "cli",
  "startedAt": "2024-12-11T10:08:09.987Z",
  "stoppedAt": "2024-12-11T10:08:14.371Z",
  "status": "running",
  "finished": true
}